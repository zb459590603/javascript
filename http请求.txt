怎么减少http请求 ajax
1. 图片地图
        图片地图允许你在一个图片上并联多个URL,目标URL的选择取决于用户单击了图片上的哪个位置。
 使用图片地图这种放手就既能减少HTTP请求，又无需改变页面外观感受，
图片地图有两种类型：服务器端图片地图将所有点击提交到同一个目标URL，向其传递用户单击的x、y坐标。
web应用程序将该x、y坐标映射为适当的操作。客户端图片地图更加典型，因为它可以将用户的点击映射到一个操作。
而无需向后端应用程序发送请求。映射通过HTML的MAP标签实现。

       使用图片地图也有缺点。在定义图片地图的区域坐标时，如果采取手工的方式则很难完成且容易出错，
而且除了矩形之外几乎无法定义其他形状。通过DHTML创建的图片地图则在Internet Explorer中无法工作。

2. CSS Sprites
      和图片地图一样，css sprites也可以合并图片，但更为灵活。又降低了下载量。合并后的图片会比分离的图片的总和要小，
这是因为它降低了图片自身的开销，如果需要在页面中为背景、按钮、导航拦、链接等提供大量图片，
css sprties绝对是一种优秀的解决方案---干净的标签、很少的图片和很短的响应时间。
 

3. 内联图片
   通过使用data:URL模式可以在Web页面中包含图片但无需任何额外的HTTP请求，
尽管Internet Explorer 目前还不支持这种方式，但它能给其他浏览器带来的节省使得它值得关注。

   data: URL模式的主要缺陷在于不受IE的支持，另外一个缺陷是可能存在数据大小上的限制，

4. 合并脚本和样式表
     和图片地图及css sprites的优点一样，将那些单独的文件合并到一个文件中，可以减少http的请求数量并缩短最终用户响应时间。


尽量减少页面的HTTP请求，可以提高页面载入速度。
　　　　减少页面中的元素
　　网页中的的图片、form、flash等等元素都会发出HTTP请求，尽可能的减少页面中非必要的元素，可以减少HTTP请求的次数。　
图片地图（Image Maps）
　　也就是图像热点，图像地图就是把一张图片分成若干区域,每个区域指向不同的URL地址，这些区域也称为热点。
Image Maps只适用于连续的图标。
　　CSS Sprites（CSS精灵）
　　图片是增加HTTP请求的最大可能者，把全站的图标都放在一个图像文件中，
然后用CSS的background-image和background-position属性定位来显示其中的一小部分。
　　这种方法把CSS写到HMTL文件里，而不采用外部调用，与Div+CSS中「表现与内容分离、把CSS都立出来」相悖，
缺点就是不利于SEO；当然，从整体上减少HTTP请求、提高页面载入速度，是有利于SEO的。
　　JS文件和CSS文件只有一个
　　合并脚本和CSS文件，可以减少了HTTP请求。有的人喜欢把CSS分成结构清晰的几个部分，
比如base.css、header.css、mianbody.css、 footer.css这样对页面的维护和修改是比较方便的，
但是对加快服务器响应时间就存在问题了。
　　少用location.reload()
　　使用location.reload() 会刷新页面，刷新页面时页面所有资源（css，js，img等）会重新请求服务器。
　　建议使用location.href="当前页url" 代替location.reload() ，使用location.href 浏览器会读取本地缓存资源。
　　动态页面静态化
　　动态网页实际上并不是独立存在于服务器上的网页文件，只有当用户请求时服务器才返回一个完整的网页。
　　用户访问动态页面需要与数据库服务器进行数据交换。
----------------------------------------------------------------------------------------------------------------------------
滑动的页面  怎么不让导航遮住





















